// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
varying vec3 vVertex;
varying vec3 vNormal;
uniform mat4 ModelViewProjectionMatrix;

void main() {
    vVertex = vertex;
    vNormal = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vVertex;
varying vec3 vNormal;
uniform vec3 lightPos;

void main() {
    float shininess = 30.0;
    vec3 ambientColor = 0.5 * vec3(0.2, 0.2, 0.6); 
    vec3 diffuse = vec3(0.0, 0.0, 1.0); 
    vec3 specular = vec3(1.0, 1.0, 1.0); 
    vec3 viewerPos = vec3(0.0, 0.0, 1.0); 
    vec3 lightDir = normalize(lightPos - vVertex);
    float diff = max(dot(vNormal, lightDir), 0.0);
    vec3 diffuseColor = diffuse * diff;
    vec3 viewDir = normalize(viewerPos - vVertex);
    vec3 reflectDir = reflect(-lightDir, vNormal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specularColor = specular * spec;
    vec3 finalColor = ambientColor + diffuseColor + specularColor;
    gl_FragColor = vec4(finalColor, 1.0);
}`;


