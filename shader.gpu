const vertexShaderSource = ` 
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texCoord;

uniform vec2 rotationCenter; 
uniform float rotationAngle; 
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

varying vec3 fVertex;
varying vec2 fTexCoord;
varying mat3 TBN;

void main() {

    vec2 translatedCoord = texCoord - rotationCenter;

    float c = cos(rotationAngle);
    float s = sin(rotationAngle);
    vec2 rotatedCoord = vec2(
        translatedCoord.x * c - translatedCoord.y * s,
        translatedCoord.x * s + translatedCoord.y * c
    );

    fTexCoord = mod(rotatedCoord + rotationCenter, 1.0);

    vec3 tangent = vec3(1.0, 0.0, 0.0);
    tangent = normalize(mat3(ModelViewMatrix) * tangent);
    vec3 normal = normalize(normal - dot(normal, tangent) * tangent);
    vec3 bitangent = cross(normal, tangent);
    TBN = mat3(tangent, bitangent, normal);

    fVertex = (ModelViewMatrix * vec4(vertex, 1.0)).xyz;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 fVertex;
varying vec2 fTexCoord;
varying mat3 TBN;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;
uniform sampler2D normalMap;
uniform bool hasTexture;

void main() {
    vec3 finalColor;

    if(hasTexture){
       vec3 textureNormal = texture2D(normalMap, fTexCoord).xyz;
       textureNormal = 2.0 * textureNormal - vec3(1.0, 1.0, 1.0);
       vec3 adjustedNormal = normalize(TBN * textureNormal);
        
        vec3 ambientColor = vec3(0.2, 0.2, 0.2);
        vec3 diffuse = texture2D(diffuseTexture, fTexCoord).rgb;
        vec3 specular = texture2D(specularTexture, fTexCoord).rgb;
        float shininess = 30.0;

        vec3 lightDir = normalize(lightPos - fVertex);
        float diff = max(dot(adjustedNormal, lightDir), 0.0);
        vec3 diffuseColor = diffuse * diff;

        vec3 viewDir = normalize(viewPos - fVertex);
        vec3 reflectDir = reflect(-lightDir, adjustedNormal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
        vec3 specularColor = specular * spec;

        finalColor = ambientColor + diffuseColor + specularColor;
    } else{
        finalColor = vec3(0.0, 0.4, 1.0);
    }

    gl_FragColor = vec4(finalColor, 1.0);
}`;